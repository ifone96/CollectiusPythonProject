from ast import If
import datetime
import glob
import os
import shutil
from tkinter import HIDDEN
import uuid
from doctest import DocFileTest
from email.utils import format_datetime
from math import fabs
from operator import index
from pickle import NONE
import pandas as pd
import pyodbc
import xlsxwriter
from matplotlib.pyplot import axis

# server = 'localhost\sqlexpress' # for a named instance
# server = 'myserver,port' # to specify an alternate port
server = 'collectiusdwhph.database.windows.net'
database = 'dwh_th_2022'
username = 'atiwat'
password = '2a#$dfERat^%'
connect_database = pyodbc.connect(
    'DRIVER={ODBC Driver 17 for SQL Server};SERVER='+server+';DATABASE='+database+';UID='+username+';PWD=' + password)

# AEON1-3
print("SQL query AEON DP...")
sql_cmd_AEON_DP = """
                    SELECT a.[alternis_portfolioidname] as Portfolio,
                        a.[alternis_batchidname] as Batch,
                        a.alternis_number as "Account Number",
                        cast(a.alternis_invoicenumber as text) as "Invoice Number",
                        a.[alternis_accountid] as uuid,
                        phone.alternis_number as "Phone Number",
                        phone.alternis_phonetypename as "Phone Type",
                        a.[alternis_contactidname] as "Debtor Name",
                        a.alternis_idnumber as "ID Card",
                        --phone.alternis_sourcename as "Source",
                        phone.alternis_verificationstatusname as "Verification Status",
                        a.[alternis_processstagename] as "Process Stage",
                        --a.owneridname as "Mediator",
                        a.alternis_outstandingprincipal as "Outstanding Principal",
                        a.alternis_lastpaymentdate as "Last Payment Date",
                        a.alternis_outstandingbalance as "Outstanding Balance",
                        --c.contactid as "contactid",
                        --task.subject as "Task Subject",
                        phone_call.subject as "PhoneCall Subject",
                        phone_call.alternis_contactdispositionname as "Contact Disposition",
                        phone_call.alternis_calloutcomename as "Calloutcome",
                        phone_call.createdon as "Last Phonecall Createdon",
                        datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) as "Last Touch Day",
                        case when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >40000 then 'No Activity'
                    when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >120 then '07. More than 4 Months'
                    when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >90 then '06. 3 Monhts to 4 Months'
                    when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >60 then '05. 2 Months to 3 Months'
                    when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >30 then '04. 1 Month to 2 Months'
                    when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >21 then '03. 3 Weeks to 1 Months'
                    when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >14 then '02. 2 Weeks to 3 Weeks'
                    when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >7 then '01. 1 Week to 2 Weeks'
                    when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >=0 then '00. Less Than 1 Week'
                    else 'No Activity'
                    end as Last_Touch
                    FROM stage.alternis_account a
                        join stage.contact c on c.contactid = a.alternis_contactid
                        left join stage.alternis_phone phone on phone.alternis_contactid = a.alternis_contactid
                        left join stage.phonecall phone_call on phone_call.phonenumber = phone.alternis_number and phone_call.regardingobjectid = a.alternis_accountid and phone_call.activityid = (SELECT TOP(1)
                                activityid
                            FROM [stage].[phonecall] phoneCall
                            where phoneCall.phonenumber = phone.alternis_number and phoneCall.regardingobjectid = a.alternis_accountid
                            ORDER BY phoneCall.createdon DESC)
                        left join stage.task on task.regardingobjectid = a.alternis_accountid and task.activityid = (select top(1)
                                activityid
                            from stage.task tas
                            where tas.regardingobjectid = a.alternis_accountid
                            ORDER BY tas.createdon DESC)
                    WHERE a.alternis_portfolioidname IN ('AEON1 TH','AEON2 TH','AEON3 TH')
                    ORDER BY a.alternis_portfolioidname, phone_call.createdon desc
                    """
df_sql_AEON_DP = pd.read_sql(sql_cmd_AEON_DP, connect_database)
print("SQL query AEON DP...is DONE!")

# DP
print("SQL query DP...")
sql_cmd_DP = """
            SELECT a.[alternis_portfolioidname] as Portfolio,
                a.[alternis_batchidname] as Batch,
                a.alternis_number as "Account Number",
                cast(a.alternis_invoicenumber as text) as "Invoice Number",
                a.[alternis_accountid] as uuid,
                phone.alternis_number as "Phone Number",
                phone.alternis_phonetypename as "Phone Type",
                a.[alternis_contactidname] as "Debtor Name",
                a.alternis_idnumber as "ID Card",
                --phone.alternis_sourcename as "Source",
                phone.alternis_verificationstatusname as "Verification Status",
                a.[alternis_processstagename] as "Process Stage",
                --a.owneridname as "Mediator",
                a.alternis_outstandingprincipal as "Outstanding Principal",
                a.alternis_lastpaymentdate as "Last Payment Date",
                a.alternis_outstandingbalance as "Outstanding Balance",
                --c.contactid as "contactid",
                --task.subject as "Task Subject",
                phone_call.subject as "PhoneCall Subject",
                phone_call.alternis_contactdispositionname as "Contact Disposition",
                phone_call.alternis_calloutcomename as "Calloutcome",
                phone_call.createdon as "Last Phonecall Createdon",
                datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) as "Last Touch Day",
                case when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >40000 then 'No Activity'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >120 then '07. More than 4 Months'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >90 then '06. 3 Monhts to 4 Months'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >60 then '05. 2 Months to 3 Months'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >30 then '04. 1 Month to 2 Months'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >21 then '03. 3 Weeks to 1 Months'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >14 then '02. 2 Weeks to 3 Weeks'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >7 then '01. 1 Week to 2 Weeks'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >=0 then '00. Less Than 1 Week'
            else 'No Activity'
            end as Last_Touch
            FROM stage.alternis_account a
                left join stage.alternis_phone phone on phone.alternis_contactid = a.alternis_contactid
                left join stage.phonecall phone_call on phone_call.phonenumber = phone.alternis_number and phone_call.regardingobjectid = a.alternis_accountid and phone_call.activityid = (SELECT TOP(1)
                        activityid
                    FROM [stage].[phonecall] phoneCall
                    where phoneCall.phonenumber = phone.alternis_number and phoneCall.regardingobjectid = a.alternis_accountid
                    ORDER BY phoneCall.createdon DESC)
            WHERE a.alternis_portfolioidname IN ('GRAB R2 1 TH','KKP1 TH','BMW1 TH','SME1 TH','SME2 TH','TMB1 TH','TMB2 TH')
            ORDER BY a.alternis_portfolioidname, phone_call.createdon desc
            """
df_sql_DP = pd.read_sql(sql_cmd_DP, connect_database)
print("SQL query DP...is DONE!")

#   DS
print("SQL query DS...")
sql_cmd_DS = """
            SELECT a.[alternis_portfolioidname] as Portfolio,
                a.[alternis_batchidname] as Batch,
                a.alternis_number as "Account Number",
                cast(a.alternis_invoicenumber as text) as "Invoice Number",
                a.[alternis_accountid] as uuid,
                phone.alternis_number as "Phone Number",
                phone.alternis_phonetypename as "Phone Type",
                a.[alternis_contactidname] as "Debtor Name",
                a.alternis_idnumber as "ID Card",
                phone.alternis_verificationstatusname as "Verification Status",
                a.[alternis_processstagename] as "Process Stage",
                a.alternis_outstandingprincipal as "Outstanding Principal",
                a.alternis_lastpaymentdate as "Last Payment Date",
                a.alternis_outstandingbalance as "Outstanding Balance",
                phone_call.subject as "PhoneCall Subject",
                phone_call.alternis_contactdispositionname as "Contact Disposition",
                phone_call.alternis_calloutcomename as "Calloutcome",
                phone_call.createdon as "Last Phonecall Createdon",
                datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) as "Last Touch Day",
                case when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >40000 then 'No Activity'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >120 then '07. More than 4 Months'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >90 then '06. 3 Monhts to 4 Months'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >60 then '05. 2 Months to 3 Months'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >30 then '04. 1 Month to 2 Months'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >21 then '03. 3 Weeks to 1 Months'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >14 then '02. 2 Weeks to 3 Weeks'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >7 then '01. 1 Week to 2 Weeks'
            when datediff(day,floor(cast(phone_call.createdon as float)),CAST( GETDATE() AS Date )) >=0 then '00. Less Than 1 Week'
            else 'No Activity'
            end as Last_Touch
            FROM stage.alternis_account a
                left join stage.alternis_phone phone on phone.alternis_contactid = a.alternis_contactid
                left join stage.phonecall phone_call on phone_call.phonenumber = phone.alternis_number and phone_call.regardingobjectid = a.alternis_accountid and phone_call.activityid = (SELECT TOP(1)
                        activityid
                    FROM [stage].[phonecall] phoneCall
                    where phoneCall.phonenumber = phone.alternis_number and phoneCall.regardingobjectid = a.alternis_accountid
                    ORDER BY phoneCall.createdon DESC)
            where a.alternis_portfolioidname IN ('ULITE SVC TH','GRAB SVC TH','KLINE W SVC TH','KLINE B SVC TH','SEAMONEY SPL SVC TH','SEAMONEY BCL SVC TH','Minor SVC TH','ALPHA AMC SVC TH') and a.alternis_processstagename not in ('Closed','Pending Close Review')
            order by a.alternis_portfolioidname, phone_call.createdon desc
            """
df_sql_DS = pd.read_sql(sql_cmd_DS, connect_database)
print("SQL query DS...is DONE!")

# Set name file with date/times
todaysdate_filename = str(
    datetime.datetime.now().strftime("%Y%m%d_All_Account")) + '.xlsx'
writer = pd.ExcelWriter(todaysdate_filename)
print("Writing File : " + todaysdate_filename)
print("Writing Sheet...")
df_sql_AEON_DP.to_excel(writer, index=False, engine='xlsxwriter', sheet_name='AEON_DP')
print("...AEON_DP")
df_sql_DP.to_excel(writer, index=False, engine='xlsxwriter', sheet_name='DP')
print("...DP")
df_sql_DS.to_excel(writer, index=False, engine='xlsxwriter', sheet_name='DS')
print("...DS")

print("Setting Format...")
workbook = writer.book
worksheet = writer.sheets['AEON_DP']
worksheet2 = writer.sheets['DP']
worksheet3 = writer.sheets['DS']
header_format = workbook.add_format({'bold': True})
    
worksheet.set_row(0, None, header_format)
worksheet.set_column('A:A', 10)
worksheet.set_column('B:B', 40)
worksheet.set_column('C:C', 40)
worksheet.set_column('D:D', 40)
worksheet.set_column('E:E', 40)
worksheet.set_column('F:F', 40)
worksheet.set_column('G:G', 40)
worksheet.set_column('H:H', 40)
worksheet.set_column('I:I', 40)
worksheet.set_column('J:J', 40)
worksheet.set_column('K:K', 40)
worksheet.set_column('L:L', 40)
worksheet.set_column('M:M', 40)
worksheet.set_column('N:N', 40)
worksheet.set_column('O:O', 40)
worksheet.set_column('P:P', 40)
worksheet.set_column('Q:Q', 40)
worksheet.set_column('R:R', 40)
worksheet.set_column('S:S', 40)
worksheet.set_column('T:T', 40)
worksheet.set_column('U:U', 40)
worksheet.set_column('V:V', 40)
worksheet.set_column('W:W', 40)
worksheet.set_column('X:X', 40)
worksheet.set_column('Y:Y', 40)
worksheet.set_column('Z:Z', 40)

worksheet2.set_row(0, None, header_format)
worksheet2.set_column('A:A', 20)
worksheet2.set_column('B:B', 40)
worksheet2.set_column('C:C', 40)
worksheet2.set_column('D:D', 40)
worksheet2.set_column('E:E', 40)
worksheet2.set_column('F:F', 40)
worksheet2.set_column('G:G', 40)
worksheet2.set_column('H:H', 40)
worksheet2.set_column('I:I', 40)
worksheet2.set_column('J:J', 40)
worksheet2.set_column('K:K', 40)
worksheet2.set_column('L:L', 40)
worksheet2.set_column('M:M', 40)
worksheet2.set_column('N:N', 40)
worksheet2.set_column('O:O', 40)
worksheet2.set_column('P:P', 40)
worksheet2.set_column('Q:Q', 40)
worksheet2.set_column('R:R', 40)
worksheet2.set_column('S:S', 40)
worksheet2.set_column('T:T', 40)
worksheet2.set_column('U:U', 40)
worksheet2.set_column('V:V', 40)
worksheet2.set_column('W:W', 40)
worksheet2.set_column('X:X', 40)
worksheet2.set_column('Y:Y', 40)
worksheet2.set_column('Z:Z', 40)

worksheet3.set_row(0, None, header_format)
worksheet3.set_column('A:A', 20)
worksheet3.set_column('B:B', 40)
worksheet3.set_column('C:C', 40)
worksheet3.set_column('D:D', 40)
worksheet3.set_column('E:E', 40)
worksheet3.set_column('F:F', 40)
worksheet3.set_column('G:G', 40)
worksheet3.set_column('H:H', 40)
worksheet3.set_column('I:I', 40)
worksheet3.set_column('J:J', 40)
worksheet3.set_column('K:K', 40)
worksheet3.set_column('L:L', 40)
worksheet3.set_column('M:M', 40)
worksheet3.set_column('N:N', 40)
worksheet3.set_column('O:O', 40)
worksheet3.set_column('P:P', 40)
worksheet3.set_column('Q:Q', 40)
worksheet3.set_column('R:R', 40)
worksheet3.set_column('S:S', 40)
worksheet3.set_column('T:T', 40)
worksheet3.set_column('U:U', 40)
worksheet3.set_column('V:V', 40)
worksheet3.set_column('W:W', 40)
worksheet3.set_column('X:X', 40)
worksheet3.set_column('Y:Y', 40)
worksheet3.set_column('Z:Z', 40)
print("Setting Format...is DONE!")

writer.save()
print("Saved " + todaysdate_filename)
print(todaysdate_filename + " is DONE!")

# Open file or folder on OS
path_url = r"Z:\\MIS\\Fone Wasin\\Python\\All Account\\"
path_file = path_url + "\\*.xlsx"
for filex in glob.iglob(path_file, recursive=True):
    os.path.realpath(path_url)
    # FBI OPEN UP!!!!
    #os.startfile(path_url)
    os.startfile(filex)
    print('Opened File&Folder:', filex)
